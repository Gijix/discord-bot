import "dotenv/config";
import { GatewayIntentBits, ActivityType } from "discord.js";
const { Guilds, GuildMessages, GuildVoiceStates, MessageContent } = GatewayIntentBits;
import Client from "./customClient.js";
const bot = new Client({ intents: [Guilds, GuildMessages, GuildVoiceStates, MessageContent] });
import commandsMsg from "./commands/message/index.js";
import commandVoice from "./commands/voice/index.js";
import help from "./help.js";
import { play, musicInfos } from "./music.js";
const prefix = "$";
bot.on("ready", () => {
  console.info("Orlando bot has started");
  bot.user.setStatus("idle");
  bot.user.setPresence({
    status: "online",
    activities: [{
      name: `<${prefix}commandName>`,
      type: ActivityType.Watching
    }]
  });
});
bot.on("messageCreate", async (message) => {
  if (message.author.bot)
    return;
  const command = message.content.split(" ")[0];
  if (command === prefix + help.name) {
    help.fn(message, bot, prefix);
  }
  musicInfos.forEach((com) => {
    if (command === prefix + com.name) {
      play(message, bot, prefix);
    }
  });
  commandsMsg.forEach((com) => {
    if (command === prefix + com.name && bot.checkPerm(message, com.permList)) {
      com.fn(message, bot);
    }
  });
});
bot.on("messageDelete", async (messageDelete) => {
});
bot.on("messageUpdate", (oldMessage, newMessage) => {
  if (newMessage.author.bot)
    return;
});
bot.on("guildMemberAdd", (member) => {
});
bot.on("guildMemberRemove", (member) => {
});
bot.on("voiceStateUpdate", async (oldstate, newstate) => {
  commandVoice.forEach((command) => {
    command.fn(oldstate, newstate);
  });
});
bot.player.on("error", (err) => console.error(err));
bot.on("error", (error) => {
  console.info("The websocket connection encountered an error:", error);
});
bot.login(process.env.BOT_TOKEN);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2JvdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0ICdkb3RlbnYvY29uZmlnJ1xuaW1wb3J0IHsgR2F0ZXdheUludGVudEJpdHMsIEFjdGl2aXR5VHlwZSB9IGZyb20gJ2Rpc2NvcmQuanMnXG5jb25zdCB7IEd1aWxkcywgR3VpbGRNZXNzYWdlcywgR3VpbGRWb2ljZVN0YXRlcywgTWVzc2FnZUNvbnRlbnQgfSA9IEdhdGV3YXlJbnRlbnRCaXRzXG5pbXBvcnQgQ2xpZW50IGZyb20gXCIuL2N1c3RvbUNsaWVudC5qc1wiO1xuY29uc3QgYm90ID0gbmV3IENsaWVudCh7IGludGVudHM6IFtHdWlsZHMsIEd1aWxkTWVzc2FnZXMsIEd1aWxkVm9pY2VTdGF0ZXMsIE1lc3NhZ2VDb250ZW50XX0pO1xuXG5pbXBvcnQgY29tbWFuZHNNc2cgZnJvbSBcIi4vY29tbWFuZHMvbWVzc2FnZS9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbW1hbmRWb2ljZSBmcm9tIFwiLi9jb21tYW5kcy92b2ljZS9pbmRleC5qc1wiO1xuaW1wb3J0IGhlbHAgZnJvbSBcIi4vaGVscC5qc1wiO1xuaW1wb3J0IHsgcGxheSwgbXVzaWNJbmZvcyB9IGZyb20gJy4vbXVzaWMuanMnO1xuXG5jb25zdCBwcmVmaXggPSBcIiRcIjtcblxuYm90Lm9uKFwicmVhZHlcIiwgKCkgPT4ge1xuICBjb25zb2xlLmluZm8oXCJPcmxhbmRvIGJvdCBoYXMgc3RhcnRlZFwiKTtcbiAgYm90LnVzZXIhLnNldFN0YXR1cygnaWRsZScpO1xuICBib3QudXNlciEuc2V0UHJlc2VuY2Uoe1xuICAgIHN0YXR1czogXCJvbmxpbmVcIixcbiAgICBhY3Rpdml0aWVzOiBbe1xuICAgICAgbmFtZTogYDwke3ByZWZpeH1jb21tYW5kTmFtZT5gLFxuICAgICAgdHlwZTpBY3Rpdml0eVR5cGUuV2F0Y2hpbmcsXG4gICAgfV0sXG4gIH0pO1xufSk7XG5cbmJvdC5vbihcIm1lc3NhZ2VDcmVhdGVcIiwgYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgaWYgKG1lc3NhZ2UuYXV0aG9yLmJvdCkgcmV0dXJuO1xuICAvLyBib3QubG9nTXNnKG1lc3NhZ2UsIHByZWZpeCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBtZXNzYWdlLmNvbnRlbnQuc3BsaXQoXCIgXCIpWzBdXG4gIGlmIChjb21tYW5kID09PSBwcmVmaXggKyBoZWxwLm5hbWUpIHtcbiAgICBoZWxwLmZuKG1lc3NhZ2UsIGJvdCwgcHJlZml4KTtcbiAgfVxuXG4gIG11c2ljSW5mb3MuZm9yRWFjaCgoY29tKSA9PiB7XG4gICAgaWYgKGNvbW1hbmQgPT09IHByZWZpeCArIGNvbS5uYW1lKSB7XG4gICAgICBwbGF5KG1lc3NhZ2UsIGJvdCwgcHJlZml4KTtcbiAgICB9XG4gIH0pO1xuICBcbiAgY29tbWFuZHNNc2cuZm9yRWFjaCgoY29tKSA9PiB7XG4gICAgaWYgKFxuICAgICAgY29tbWFuZCA9PT0gcHJlZml4ICsgY29tLm5hbWUgJiZcbiAgICAgIGJvdC5jaGVja1Blcm0obWVzc2FnZSwgY29tLnBlcm1MaXN0KVxuICAgICkge1xuICAgICAgY29tLmZuKG1lc3NhZ2UsIGJvdCk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5ib3Qub24oXCJtZXNzYWdlRGVsZXRlXCIsIGFzeW5jIChtZXNzYWdlRGVsZXRlKSA9PiB7XG4gIC8vIGJvdC5sb2dEZWxldGVNc2cobWVzc2FnZURlbGV0ZSk7XG59KTtcblxuYm90Lm9uKFwibWVzc2FnZVVwZGF0ZVwiLCAob2xkTWVzc2FnZSwgbmV3TWVzc2FnZSkgPT4ge1xuICBpZiAobmV3TWVzc2FnZS5hdXRob3IhLmJvdCkgcmV0dXJuO1xuICAvLyBib3QubG9nVXBkYXRlTXNnKG9sZE1lc3NhZ2UsIG5ld01lc3NhZ2UpO1xufSk7XG5cbmJvdC5vbihcImd1aWxkTWVtYmVyQWRkXCIsIChtZW1iZXIpID0+IHtcbiAgLy8gYm90LmxvZ1VzZXJTdGF0ZShtZW1iZXIpO1xufSk7XG5cbmJvdC5vbihcImd1aWxkTWVtYmVyUmVtb3ZlXCIsKG1lbWJlcikgPT4ge1xuICAvLyBib3QubG9nVXNlclN0YXRlKG1lbWJlcilcbn0pXG5cbmJvdC5vbihcInZvaWNlU3RhdGVVcGRhdGVcIiwgYXN5bmMgKG9sZHN0YXRlLCBuZXdzdGF0ZSkgPT4ge1xuICAvLyBib3QubG9nVm9pY2VVcGRhdGUob2xkc3RhdGUsIG5ld3N0YXRlKTtcbiAgY29tbWFuZFZvaWNlLmZvckVhY2goKGNvbW1hbmQpID0+IHtcbiAgICBjb21tYW5kLmZuKG9sZHN0YXRlLCBuZXdzdGF0ZSk7XG4gIH0pO1xufSk7XG5cbmJvdC5wbGF5ZXIub24oJ2Vycm9yJywoZXJyOiBhbnkpPT4gY29uc29sZS5lcnJvcihlcnIpKVxuXG5ib3Qub24oXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgY29uc29sZS5pbmZvKFwiVGhlIHdlYnNvY2tldCBjb25uZWN0aW9uIGVuY291bnRlcmVkIGFuIGVycm9yOlwiLCBlcnJvcik7XG59KTtcblxuYm90LmxvZ2luKHByb2Nlc3MuZW52LkJPVF9UT0tFTik7XG4iXSwKICAibWFwcGluZ3MiOiAiQUFBQSxPQUFPO0FBQ1AsU0FBUyxtQkFBbUIsb0JBQW9CO0FBQ2hELE1BQU0sRUFBRSxRQUFRLGVBQWUsa0JBQWtCLGVBQWUsSUFBSTtBQUNwRSxPQUFPLFlBQVk7QUFDbkIsTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFLFNBQVMsQ0FBQyxRQUFRLGVBQWUsa0JBQWtCLGNBQWMsRUFBQyxDQUFDO0FBRTVGLE9BQU8saUJBQWlCO0FBQ3hCLE9BQU8sa0JBQWtCO0FBQ3pCLE9BQU8sVUFBVTtBQUNqQixTQUFTLE1BQU0sa0JBQWtCO0FBRWpDLE1BQU0sU0FBUztBQUVmLElBQUksR0FBRyxTQUFTLE1BQU07QUFDcEIsVUFBUSxLQUFLLHlCQUF5QjtBQUN0QyxNQUFJLEtBQU0sVUFBVSxNQUFNO0FBQzFCLE1BQUksS0FBTSxZQUFZO0FBQUEsSUFDcEIsUUFBUTtBQUFBLElBQ1IsWUFBWSxDQUFDO0FBQUEsTUFDWCxNQUFNLElBQUk7QUFBQSxNQUNWLE1BQUssYUFBYTtBQUFBLElBQ3BCLENBQUM7QUFBQSxFQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsSUFBSSxHQUFHLGlCQUFpQixPQUFPLFlBQVk7QUFDekMsTUFBSSxRQUFRLE9BQU87QUFBSztBQUV4QixRQUFNLFVBQVUsUUFBUSxRQUFRLE1BQU0sR0FBRyxFQUFFO0FBQzNDLE1BQUksWUFBWSxTQUFTLEtBQUssTUFBTTtBQUNsQyxTQUFLLEdBQUcsU0FBUyxLQUFLLE1BQU07QUFBQSxFQUM5QjtBQUVBLGFBQVcsUUFBUSxDQUFDLFFBQVE7QUFDMUIsUUFBSSxZQUFZLFNBQVMsSUFBSSxNQUFNO0FBQ2pDLFdBQUssU0FBUyxLQUFLLE1BQU07QUFBQSxJQUMzQjtBQUFBLEVBQ0YsQ0FBQztBQUVELGNBQVksUUFBUSxDQUFDLFFBQVE7QUFDM0IsUUFDRSxZQUFZLFNBQVMsSUFBSSxRQUN6QixJQUFJLFVBQVUsU0FBUyxJQUFJLFFBQVEsR0FDbkM7QUFDQSxVQUFJLEdBQUcsU0FBUyxHQUFHO0FBQUEsSUFDckI7QUFBQSxFQUNGLENBQUM7QUFDSCxDQUFDO0FBRUQsSUFBSSxHQUFHLGlCQUFpQixPQUFPLGtCQUFrQjtBQUVqRCxDQUFDO0FBRUQsSUFBSSxHQUFHLGlCQUFpQixDQUFDLFlBQVksZUFBZTtBQUNsRCxNQUFJLFdBQVcsT0FBUTtBQUFLO0FBRTlCLENBQUM7QUFFRCxJQUFJLEdBQUcsa0JBQWtCLENBQUMsV0FBVztBQUVyQyxDQUFDO0FBRUQsSUFBSSxHQUFHLHFCQUFvQixDQUFDLFdBQVc7QUFFdkMsQ0FBQztBQUVELElBQUksR0FBRyxvQkFBb0IsT0FBTyxVQUFVLGFBQWE7QUFFdkQsZUFBYSxRQUFRLENBQUMsWUFBWTtBQUNoQyxZQUFRLEdBQUcsVUFBVSxRQUFRO0FBQUEsRUFDL0IsQ0FBQztBQUNILENBQUM7QUFFRCxJQUFJLE9BQU8sR0FBRyxTQUFRLENBQUMsUUFBWSxRQUFRLE1BQU0sR0FBRyxDQUFDO0FBRXJELElBQUksR0FBRyxTQUFTLENBQUMsVUFBVTtBQUN6QixVQUFRLEtBQUssa0RBQWtELEtBQUs7QUFDdEUsQ0FBQztBQUVELElBQUksTUFBTSxRQUFRLElBQUksU0FBUzsiLAogICJuYW1lcyI6IFtdCn0K
