import { joinVoiceChannel } from "@discordjs/voice";
import { Player } from "discord-music-player";
import {
  Client,
  EmbedBuilder,
  AuditLogEvent
} from "discord.js";
class myClient extends Client {
  constructor(arg) {
    super(arg);
    this.player = new Player(this, {
      leaveOnEnd: false,
      leaveOnStop: false,
      leaveOnEmpty: true,
      timeout: 0,
      volume: 50,
      quality: "high"
    });
    this.CONFIG_CHANNEL_ID = null;
    this.LOG_CHANNEL_ID = "871760169770582066";
    this.ADMIN_ID = "247100615489093632";
  }
  join(message) {
    return joinVoiceChannel({
      guildId: message.guildId,
      channelId: message.member.voice.channelId,
      adapterCreator: message.guild.voiceAdapterCreator
    });
  }
  logChannelMsg(message) {
    return message.guild.channels.cache.find(
      (chan) => chan.id === "871760169770582066"
    );
  }
  logChannelVoice(arg) {
    return arg.guild.channels.cache.find(
      (chan) => chan.id === "872055513871958046"
    );
  }
  logChannelUserState(member) {
    return member.guild.channels.cache.get("872907085002702859");
  }
  checkPerm(msg, permList) {
    return msg.member.permissions.has(permList) || msg.member.user.id === this.ADMIN_ID;
  }
  get eventTime() {
    const checkNum = (arg) => {
      if (arg < 10) {
        return "0" + arg;
      } else {
        return arg;
      }
    };
    const createdAt = new Date();
    return {
      year: checkNum(createdAt.getFullYear()),
      month: checkNum(createdAt.getMonth() + 1),
      day: checkNum(createdAt.getDate()),
      hours: checkNum(createdAt.getHours()),
      minutes: checkNum(createdAt.getMinutes()),
      seconds: checkNum(createdAt.getSeconds())
    };
  }
  createEmbed(color, title, author, ...fields) {
    const time = this.eventTime;
    const embed = new EmbedBuilder().setColor(color).setTitle(title).setAuthor({ name: author }).addFields(...fields).setTimestamp().setFooter({ text: `${time.hours} H ${time.minutes}  -  ${time.day}/${time.month}/${time.year}` });
    return embed;
  }
  async logMsg(message, prefix) {
    if ([
      this.logChannelMsg(message).id,
      this.logChannelVoice(message).id,
      this.logChannelUserState(message.member).id
    ].includes(message.channel.id))
      return;
    if (message.author.bot)
      return;
    const command = message.content.startsWith(prefix);
    const color = command ? "Yellow" : "Green";
    const title = command ? "Try Command" : "Send Message";
    const embed = this.createEmbed(
      color,
      title,
      message.id,
      { name: "User", value: `<@${message.member.user.id}>`, inline: true },
      { name: "Message", value: message.content, inline: true },
      { name: "Channel", value: message.channel.name, inline: true }
    );
    await this.logChannelMsg(message).send({ embeds: [embed.data] });
  }
  async logDeleteMsg(message) {
    try {
      const fetchedLog = await message.guild.fetchAuditLogs({
        type: AuditLogEvent.MessageDelete,
        limit: 1
      });
      const executer = fetchedLog.entries.first().executor;
      const author = message.member.user;
      const embed = this.createEmbed(
        "Orange",
        "Message Deleted",
        message.id,
        { name: "Author", value: `<@${author.id}>`, inline: true },
        { name: "Message", value: message.content, inline: true },
        { name: "Channel", value: message.channel.name, inline: true },
        { name: `deleted by`, value: `<@${executer.id}>`, inline: false }
      );
      this.logChannelMsg(message).send({ embeds: [embed.data] });
    } catch (e) {
      console.error(e);
    }
  }
  async logUpdateMsg(oldMessage, newMessage) {
    const embed = this.createEmbed(
      "Blue",
      "Message Updated",
      newMessage.id,
      { name: "Author", value: `<@${newMessage.author.id}>`, inline: true },
      { name: "Old Message", value: oldMessage.content, inline: true },
      { name: `New Message`, value: newMessage.content, inline: true },
      { name: "Channel", value: newMessage.channel.name, inline: false }
    );
    await this.logChannelMsg(newMessage).send({ embeds: [embed] });
  }
  async logUserState(member) {
    const message = await member.guild.members.fetch(member) ? "User join guild" : "User leave guild";
    const embed = this.createEmbed(
      "Green",
      message,
      member.id,
      { name: "User", value: `<@${member.id}>`, inline: true },
      { name: "As", value: member.user.username, inline: true }
    );
    await this.logChannelUserState(member).send({ embeds: [embed.data] });
  }
  async logVoiceUpdate(oldstate, newState) {
    let embed;
    if (oldstate.channelId) {
      if (newState.channelId) {
        embed = this.createEmbed(
          "Blue",
          "User Switch voiceChat",
          newState.member.id,
          { name: "User", value: `<@${newState.member.id}>`, inline: false },
          { name: "Old channel", value: oldstate.channel.name, inline: true },
          { name: "New Channel", value: newState.channel.name, inline: true }
        );
      } else {
        embed = this.createEmbed(
          "Green",
          "User leave voiceChat",
          oldstate.member.id,
          { name: "User", value: `<@${oldstate.member.id}>`, inline: true },
          { name: "Channel", value: oldstate.channel.name, inline: true }
        );
      }
    } else {
      embed = this.createEmbed(
        "Green",
        "User join a voiceChat",
        newState.member.id,
        { name: "User", value: `<@${newState.member.id}>`, inline: true },
        { name: "Channel", value: newState.channel.name, inline: true }
      );
    }
    await this.logChannelVoice(oldstate).send({ embeds: [embed.data] });
  }
  loadResponse(message) {
    const channelConfig = message.guild.channels.cache.find(
      (chan) => chan.id === this.CONFIG_CHANNEL_ID
    );
  }
}
var customClient_default = myClient;
export {
  customClient_default as default
};
//# sourceMappingURL=data:application/json;base64,
